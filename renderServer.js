// Server Side Rendering
import { Application, Router } from "https://deno.land/x/oak/mod.ts";

const port = 8081;
const app = new Application();
const router = new Router();

var HTML = `<!doctype html>
<html lang=\"en\">
<head>
  <meta charset=\"utf-8\">
    <title>Svelte app</title>
    <meta name=\"theme-color\" content=\"#1e88e5\">
    <meta name=\"mobile-web-app-capable\" content=\"yes\">
    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">
    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">
    
    <link rel=\"icon\" type=\"image/png\" href=\"https://cdn.example.com/favicon.png\">
    <link rel=\"stylesheet\" href=\"https://cdn.example.com/global.css\">
    <link rel=\"stylesheet\" href=\"https://cdn.example.com/bundle.css\">
    <script defer src=\"https://cdn.example.com/bundle.js\"></script>
    <!-- {{INJECT.HEAD}} -->\n</head>
    <body>
    <!-- {{INJECT.BODY}} -->
    </body>
    </html>`;

function run(fn) {
  return fn();
}
function run_all(fns) {
  fns.forEach(run);
}
const escaped = {
  '"': '&quot;',
  "'": '&#39;',
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;'
};
function escape(html) {
  return String(html).replace(/["'&<>]/g, match => escaped[match]);
}
let on_destroy;
function create_ssr_component(fn) {
  function $$render(result, props, bindings, slots) {
    const html = fn(result, props, bindings, slots);
    return html;
  }
  return {
    render: (props = {}, options = {}) => {
      on_destroy = [];
      const result = { title: '', head: '', css: new Set() };
      const html = $$render(result, props, {}, options);
      run_all(on_destroy);
      return {
        html,
        css: {
          code: Array.from(result.css).map(css => css.code).join('\n'),
          map: null // TODO
        },
        head: result.title + result.head
      };
    },
    $$render
  };
}

/* src/App.svelte generated by Svelte v3.29.0 */

const css = {
  code: "h1.svelte-svd6po.svelte-svd6po{color:purple}.notice.svelte-svd6po.svelte-svd6po{width:auto;display:inline-block;border:2px solid green;padding:2em}.notice.svelte-svd6po hr.svelte-svd6po{margin:2em 0;border-color:green}",
  map: "{\"version\":3,\"file\":\"App.svelte\",\"sources\":[\"App.svelte\"],\"sourcesContent\":[\"<script>\\n\\texport let name;\\n</script>\\n\\n<h1>Hello {name}!</h1>\\n\\n<figure class=\\\"notice\\\">\\n\\t<p><strong>THIS IS A DEMO</strong></p>\\n\\t<p>Navigate to any pathname; eg `/lukeed` for updated SSR response.</p>\\n\\t<p>On the server-side app, the greeting will always update.</p>\\n\\t<p>On the client-side app, it will always read \\\"Hello world!\\\"</p>\\n\\n\\t<hr>\\n\\n\\t<p>PS – There is no CDN set up, so 404s are expected.</p>\\n</figure>\\n\\n<style>\\n\\th1 {\\n\\t\\tcolor: purple;\\n\\t}\\n\\t.notice {\\n\\t\\twidth: auto;\\n\\t\\tdisplay: inline-block;\\n\\t\\tborder: 2px solid green;\\n\\t\\tpadding: 2em;\\n\\t}\\n\\t.notice hr {\\n\\t\\tmargin: 2em 0;\\n\\t\\tborder-color: green;\\n\\t}\\n</style>\\n\"],\"names\":[],\"mappings\":\"AAkBC,EAAE,4BAAC,CAAC,AACH,KAAK,CAAE,MAAM,AACd,CAAC,AACD,OAAO,4BAAC,CAAC,AACR,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,YAAY,CACrB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,OAAO,CAAE,GAAG,AACb,CAAC,AACD,qBAAO,CAAC,EAAE,cAAC,CAAC,AACX,MAAM,CAAE,GAAG,CAAC,CAAC,CACb,YAAY,CAAE,KAAK,AACpB,CAAC\"}"
};

const App = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { name } = $$props;
  if ($$props.name === void 0 && $$bindings.name && name !== void 0) $$bindings.name(name);
  $$result.css.add(css);

  return `<h1 class="${"svelte-svd6po"}">Hello ${escape(name)}!</h1>

<figure class="${"notice svelte-svd6po"}"><p><strong>THIS IS A DEMO</strong></p>
	<p>Navigate to any pathname; eg \`/name\` for updated SSR response.</p>
	<p>On the server-side app, the greeting will always update.</p>
	<p>On the client-side app, it will always read &quot;Hello world!&quot;</p>

	<hr class="${"svelte-svd6po"}">

	<p>PS – There is no CDN set up, so 404s are expected.</p>
</figure>`;
});

router
  .get("/", (context) => {
    context.response.body = "Hello world!";
  })
  .get("/:name", (ctx) => {

    console.log({ params: ctx.params || 'none' })
    const name = ctx.params.name || 'friend';

    // ssr = { html, css, head }
    const ssr = App.render({ name });

    let inject_head = ssr.head || '';
    if (ssr.css && ssr.css.code) {
      inject_head += `<style>${ssr.css.code}</style>`;
    }

    const output = // "Hello world!"
      (
        HTML // Inject SSR'd header & body contents
          .replace('<!-- {{INJECT.HEAD}} -->', inject_head)
          .replace('<!-- {{INJECT.BODY}} -->', ssr.html)
      );

    ctx.response.headers.set("content-type", `text/html;charset=UTF-8`);
    ctx.response.body = output;

  });

app.use(router.routes());

app.addEventListener('listen', () => {
  console.log(`Listening on: http://localhost:${port}/`);
});

await app.listen({ port });